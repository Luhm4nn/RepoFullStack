generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model asiento {
  idSala          Int
  filaAsiento     String
  nroAsiento      Int
  tipo            String
  idTarifa        Int?
  sala            sala              @relation(fields: [idSala], references: [idSala], onDelete: Cascade, onUpdate: NoAction)
  tarifa          tarifa?           @relation(fields: [idTarifa], references: [idTarifa], onDelete: NoAction, onUpdate: NoAction)
  asiento_reserva asiento_reserva[]

  @@id([idSala, filaAsiento, nroAsiento])
  @@index([idTarifa])
}

model asiento_reserva {
  idSala           Int
  filaAsiento      String
  nroAsiento       Int
  fechaHoraFuncion DateTime
  DNI              Int
  fechaHoraReserva DateTime
  reserva          reserva  @relation(fields: [idSala, fechaHoraFuncion, DNI, fechaHoraReserva], references: [idSala, fechaHoraFuncion, DNI, fechaHoraReserva], onDelete: NoAction, onUpdate: NoAction)
  asiento          asiento  @relation(fields: [idSala, filaAsiento, nroAsiento], references: [idSala, filaAsiento, nroAsiento], onDelete: NoAction, onUpdate: NoAction)

  @@id([idSala, filaAsiento, nroAsiento, fechaHoraFuncion])
  @@index([idSala, fechaHoraFuncion, DNI, fechaHoraReserva])
}

model funcion {
  idSala           Int
  fechaHoraFuncion DateTime
  idPelicula       Int
  estado           String
  pelicula         pelicula  @relation(fields: [idPelicula], references: [idPelicula], onDelete: NoAction, onUpdate: NoAction)
  sala             sala      @relation(fields: [idSala], references: [idSala], onDelete: NoAction, onUpdate: NoAction)
  reserva          reserva[]

  @@id([idSala, fechaHoraFuncion])
  @@index([idPelicula])
}

model parametro {
  idParametro          Int    @id @default(autoincrement())
  descripcionParametro String
  valor                Int
}

model pelicula {
  idPelicula      Int       @id @default(autoincrement())
  nombrePelicula  String
  duracion        Int
  generoPelicula  String
  director        String?
  fechaEstreno    DateTime?
  sinopsis        String?
  trailerURL      String?
  portada         String?
  portadaPublicId String?
  MPAA            String?
  funcion         funcion[]
}

model refresh_token {
  id      Int     @id @default(autoincrement())
  userId  Int
  token   String  @unique
  usuario usuario @relation(fields: [userId], references: [DNI], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
}

model reserva {
  idSala               Int
  fechaHoraFuncion     DateTime
  DNI                  Int
  fechaHoraReserva     DateTime
  fechaHoraCancelacion DateTime?
  estado               String
  total                Decimal
  asiento_reserva      asiento_reserva[]
  usuario              usuario           @relation(fields: [DNI], references: [DNI], onDelete: NoAction, onUpdate: NoAction)
  funcion              funcion           @relation(fields: [idSala, fechaHoraFuncion], references: [idSala, fechaHoraFuncion], onDelete: NoAction, onUpdate: NoAction)

  @@id([idSala, fechaHoraFuncion, DNI, fechaHoraReserva])
  @@index([DNI])
}

model sala {
  idSala          Int       @id @default(autoincrement())
  nombreSala      String    @unique
  ubicacion       String
  filas           Int
  asientosPorFila Int
  asiento         asiento[]
  funcion         funcion[]
}

model tarifa {
  idTarifa          Int       @id @default(autoincrement())
  precio            Decimal
  descripcionTarifa String
  fechaDesde        DateTime
  asiento           asiento[]
}

model usuario {
  DNI             Int             @id
  nombreUsuario   String
  apellidoUsuario String
  email           String          @unique
  contrasena      String
  rol             String
  telefono        String?
  refresh_token   refresh_token[]
  reserva         reserva[]
}
